/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getIncenseTypeDecoder,
  getIncenseTypeEncoder,
  type IncenseType,
  type IncenseTypeArgs,
} from '../types';

export const UPDATE_INCENSE_TYPES_DISCRIMINATOR = new Uint8Array([
  36, 90, 39, 8, 76, 221, 92, 131,
]);

export function getUpdateIncenseTypesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_INCENSE_TYPES_DISCRIMINATOR
  );
}

export type UpdateIncenseTypesInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTempleConfig extends string
        ? WritableAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateIncenseTypesInstructionData = {
  discriminator: ReadonlyUint8Array;
  incenseTypes: Array<IncenseType>;
};

export type UpdateIncenseTypesInstructionDataArgs = {
  incenseTypes: Array<IncenseTypeArgs>;
};

export function getUpdateIncenseTypesInstructionDataEncoder(): Encoder<UpdateIncenseTypesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['incenseTypes', getArrayEncoder(getIncenseTypeEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_INCENSE_TYPES_DISCRIMINATOR })
  );
}

export function getUpdateIncenseTypesInstructionDataDecoder(): Decoder<UpdateIncenseTypesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['incenseTypes', getArrayDecoder(getIncenseTypeDecoder())],
  ]);
}

export function getUpdateIncenseTypesInstructionDataCodec(): Codec<
  UpdateIncenseTypesInstructionDataArgs,
  UpdateIncenseTypesInstructionData
> {
  return combineCodec(
    getUpdateIncenseTypesInstructionDataEncoder(),
    getUpdateIncenseTypesInstructionDataDecoder()
  );
}

export type UpdateIncenseTypesInput<
  TAccountTempleConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  templeConfig: Address<TAccountTempleConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  incenseTypes: UpdateIncenseTypesInstructionDataArgs['incenseTypes'];
};

export function getUpdateIncenseTypesInstruction<
  TAccountTempleConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: UpdateIncenseTypesInput<TAccountTempleConfig, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): UpdateIncenseTypesInstruction<
  TProgramAddress,
  TAccountTempleConfig,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateIncenseTypesInstructionDataEncoder().encode(
      args as UpdateIncenseTypesInstructionDataArgs
    ),
  } as UpdateIncenseTypesInstruction<
    TProgramAddress,
    TAccountTempleConfig,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedUpdateIncenseTypesInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    templeConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: UpdateIncenseTypesInstructionData;
};

export function parseUpdateIncenseTypesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateIncenseTypesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      templeConfig: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getUpdateIncenseTypesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
