/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_BUDDHA_NFT_DISCRIMINATOR = new Uint8Array([
  104, 31, 241, 122, 252, 250, 253, 0,
]);

export function getMintBuddhaNftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_BUDDHA_NFT_DISCRIMINATOR
  );
}

export type MintBuddhaNftInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountTempleTreasury extends string | AccountMeta<string> = string,
  TAccountUserState extends string | AccountMeta<string> = string,
  TAccountNftMintAccount extends string | AccountMeta<string> = string,
  TAccountNftAssociatedTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountBuddhaNftAccount extends string | AccountMeta<string> = string,
  TAccountMetaAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTempleConfig extends string
        ? WritableAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountTempleTreasury extends string
        ? WritableAccount<TAccountTempleTreasury>
        : TAccountTempleTreasury,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountNftMintAccount extends string
        ? WritableAccount<TAccountNftMintAccount>
        : TAccountNftMintAccount,
      TAccountNftAssociatedTokenAccount extends string
        ? WritableAccount<TAccountNftAssociatedTokenAccount>
        : TAccountNftAssociatedTokenAccount,
      TAccountBuddhaNftAccount extends string
        ? WritableAccount<TAccountBuddhaNftAccount>
        : TAccountBuddhaNftAccount,
      TAccountMetaAccount extends string
        ? WritableAccount<TAccountMetaAccount>
        : TAccountMetaAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type MintBuddhaNftInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MintBuddhaNftInstructionDataArgs = {};

export function getMintBuddhaNftInstructionDataEncoder(): FixedSizeEncoder<MintBuddhaNftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MINT_BUDDHA_NFT_DISCRIMINATOR })
  );
}

export function getMintBuddhaNftInstructionDataDecoder(): FixedSizeDecoder<MintBuddhaNftInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMintBuddhaNftInstructionDataCodec(): FixedSizeCodec<
  MintBuddhaNftInstructionDataArgs,
  MintBuddhaNftInstructionData
> {
  return combineCodec(
    getMintBuddhaNftInstructionDataEncoder(),
    getMintBuddhaNftInstructionDataDecoder()
  );
}

export type MintBuddhaNftAsyncInput<
  TAccountAuthority extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountTempleTreasury extends string = string,
  TAccountUserState extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountNftAssociatedTokenAccount extends string = string,
  TAccountBuddhaNftAccount extends string = string,
  TAccountMetaAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** 用户账号 */
  authority: TransactionSigner<TAccountAuthority>;
  templeConfig?: Address<TAccountTempleConfig>;
  templeTreasury: Address<TAccountTempleTreasury>;
  /** 用户账号 */
  userState?: Address<TAccountUserState>;
  nftMintAccount?: Address<TAccountNftMintAccount>;
  /** 用户的NFT关联账户 */
  nftAssociatedTokenAccount?: Address<TAccountNftAssociatedTokenAccount>;
  buddhaNftAccount?: Address<TAccountBuddhaNftAccount>;
  metaAccount?: Address<TAccountMetaAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
};

export async function getMintBuddhaNftInstructionAsync<
  TAccountAuthority extends string,
  TAccountTempleConfig extends string,
  TAccountTempleTreasury extends string,
  TAccountUserState extends string,
  TAccountNftMintAccount extends string,
  TAccountNftAssociatedTokenAccount extends string,
  TAccountBuddhaNftAccount extends string,
  TAccountMetaAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: MintBuddhaNftAsyncInput<
    TAccountAuthority,
    TAccountTempleConfig,
    TAccountTempleTreasury,
    TAccountUserState,
    TAccountNftMintAccount,
    TAccountNftAssociatedTokenAccount,
    TAccountBuddhaNftAccount,
    TAccountMetaAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintBuddhaNftInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleConfig,
    TAccountTempleTreasury,
    TAccountUserState,
    TAccountNftMintAccount,
    TAccountNftAssociatedTokenAccount,
    TAccountBuddhaNftAccount,
    TAccountMetaAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    templeTreasury: { value: input.templeTreasury ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    nftAssociatedTokenAccount: {
      value: input.nftAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    buddhaNftAccount: {
      value: input.buddhaNftAccount ?? null,
      isWritable: true,
    },
    metaAccount: { value: input.metaAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.templeConfig.value) {
    accounts.templeConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 108, 101, 95, 118, 49])
        ),
      ],
    });
  }
  if (!accounts.userState.value) {
    accounts.userState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([117, 115, 101, 114, 95, 115, 116, 97, 116, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.nftMintAccount.value) {
    accounts.nftMintAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([66, 117, 100, 100, 104, 97, 78, 70, 84])
        ),
        getAddressEncoder().encode(expectAddress(accounts.templeConfig.value)),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.nftAssociatedTokenAccount.value) {
    accounts.nftAssociatedTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.nftMintAccount.value)
        ),
      ],
    });
  }
  if (!accounts.buddhaNftAccount.value) {
    accounts.buddhaNftAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([66, 117, 100, 100, 104, 97, 78, 70, 84])
        ),
        getBytesEncoder().encode(
          new Uint8Array([97, 99, 99, 111, 117, 110, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.templeConfig.value)),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.metaAccount.value) {
    accounts.metaAccount.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.nftMintAccount.value)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.templeTreasury),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.nftAssociatedTokenAccount),
      getAccountMeta(accounts.buddhaNftAccount),
      getAccountMeta(accounts.metaAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getMintBuddhaNftInstructionDataEncoder().encode({}),
  } as MintBuddhaNftInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleConfig,
    TAccountTempleTreasury,
    TAccountUserState,
    TAccountNftMintAccount,
    TAccountNftAssociatedTokenAccount,
    TAccountBuddhaNftAccount,
    TAccountMetaAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type MintBuddhaNftInput<
  TAccountAuthority extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountTempleTreasury extends string = string,
  TAccountUserState extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountNftAssociatedTokenAccount extends string = string,
  TAccountBuddhaNftAccount extends string = string,
  TAccountMetaAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** 用户账号 */
  authority: TransactionSigner<TAccountAuthority>;
  templeConfig: Address<TAccountTempleConfig>;
  templeTreasury: Address<TAccountTempleTreasury>;
  /** 用户账号 */
  userState: Address<TAccountUserState>;
  nftMintAccount: Address<TAccountNftMintAccount>;
  /** 用户的NFT关联账户 */
  nftAssociatedTokenAccount: Address<TAccountNftAssociatedTokenAccount>;
  buddhaNftAccount: Address<TAccountBuddhaNftAccount>;
  metaAccount: Address<TAccountMetaAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
};

export function getMintBuddhaNftInstruction<
  TAccountAuthority extends string,
  TAccountTempleConfig extends string,
  TAccountTempleTreasury extends string,
  TAccountUserState extends string,
  TAccountNftMintAccount extends string,
  TAccountNftAssociatedTokenAccount extends string,
  TAccountBuddhaNftAccount extends string,
  TAccountMetaAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: MintBuddhaNftInput<
    TAccountAuthority,
    TAccountTempleConfig,
    TAccountTempleTreasury,
    TAccountUserState,
    TAccountNftMintAccount,
    TAccountNftAssociatedTokenAccount,
    TAccountBuddhaNftAccount,
    TAccountMetaAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): MintBuddhaNftInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTempleConfig,
  TAccountTempleTreasury,
  TAccountUserState,
  TAccountNftMintAccount,
  TAccountNftAssociatedTokenAccount,
  TAccountBuddhaNftAccount,
  TAccountMetaAccount,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountTokenMetadataProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    templeTreasury: { value: input.templeTreasury ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    nftAssociatedTokenAccount: {
      value: input.nftAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    buddhaNftAccount: {
      value: input.buddhaNftAccount ?? null,
      isWritable: true,
    },
    metaAccount: { value: input.metaAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.templeTreasury),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.nftAssociatedTokenAccount),
      getAccountMeta(accounts.buddhaNftAccount),
      getAccountMeta(accounts.metaAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getMintBuddhaNftInstructionDataEncoder().encode({}),
  } as MintBuddhaNftInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleConfig,
    TAccountTempleTreasury,
    TAccountUserState,
    TAccountNftMintAccount,
    TAccountNftAssociatedTokenAccount,
    TAccountBuddhaNftAccount,
    TAccountMetaAccount,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedMintBuddhaNftInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** 用户账号 */
    authority: TAccountMetas[0];
    templeConfig: TAccountMetas[1];
    templeTreasury: TAccountMetas[2];
    /** 用户账号 */
    userState: TAccountMetas[3];
    nftMintAccount: TAccountMetas[4];
    /** 用户的NFT关联账户 */
    nftAssociatedTokenAccount: TAccountMetas[5];
    buddhaNftAccount: TAccountMetas[6];
    metaAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    tokenMetadataProgram: TAccountMetas[10];
    associatedTokenProgram: TAccountMetas[11];
    rent: TAccountMetas[12];
  };
  data: MintBuddhaNftInstructionData;
};

export function parseMintBuddhaNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintBuddhaNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      templeConfig: getNextAccount(),
      templeTreasury: getNextAccount(),
      userState: getNextAccount(),
      nftMintAccount: getNextAccount(),
      nftAssociatedTokenAccount: getNextAccount(),
      buddhaNftAccount: getNextAccount(),
      metaAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getMintBuddhaNftInstructionDataDecoder().decode(instruction.data),
  };
}
