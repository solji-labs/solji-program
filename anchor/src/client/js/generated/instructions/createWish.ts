/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_WISH_DISCRIMINATOR = new Uint8Array([
  47, 64, 159, 45, 95, 19, 61, 165,
]);

export function getCreateWishDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_WISH_DISCRIMINATOR);
}

export type CreateWishInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountWishAccount extends string | AccountMeta<string> = string,
  TAccountUserState extends string | AccountMeta<string> = string,
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountWishAccount extends string
        ? WritableAccount<TAccountWishAccount>
        : TAccountWishAccount,
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountTempleConfig extends string
        ? ReadonlyAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateWishInstructionData = {
  discriminator: ReadonlyUint8Array;
  wishId: bigint;
  contentHash: ReadonlyUint8Array;
  isAnonymous: boolean;
};

export type CreateWishInstructionDataArgs = {
  wishId: number | bigint;
  contentHash: ReadonlyUint8Array;
  isAnonymous: boolean;
};

export function getCreateWishInstructionDataEncoder(): FixedSizeEncoder<CreateWishInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['wishId', getU64Encoder()],
      ['contentHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['isAnonymous', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_WISH_DISCRIMINATOR })
  );
}

export function getCreateWishInstructionDataDecoder(): FixedSizeDecoder<CreateWishInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['wishId', getU64Decoder()],
    ['contentHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['isAnonymous', getBooleanDecoder()],
  ]);
}

export function getCreateWishInstructionDataCodec(): FixedSizeCodec<
  CreateWishInstructionDataArgs,
  CreateWishInstructionData
> {
  return combineCodec(
    getCreateWishInstructionDataEncoder(),
    getCreateWishInstructionDataDecoder()
  );
}

export type CreateWishAsyncInput<
  TAccountUser extends string = string,
  TAccountWishAccount extends string = string,
  TAccountUserState extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  wishAccount?: Address<TAccountWishAccount>;
  userState?: Address<TAccountUserState>;
  templeConfig?: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  wishId: CreateWishInstructionDataArgs['wishId'];
  contentHash: CreateWishInstructionDataArgs['contentHash'];
  isAnonymous: CreateWishInstructionDataArgs['isAnonymous'];
};

export async function getCreateWishInstructionAsync<
  TAccountUser extends string,
  TAccountWishAccount extends string,
  TAccountUserState extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateWishAsyncInput<
    TAccountUser,
    TAccountWishAccount,
    TAccountUserState,
    TAccountTempleConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateWishInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountWishAccount,
    TAccountUserState,
    TAccountTempleConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    wishAccount: { value: input.wishAccount ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.wishAccount.value) {
    accounts.wishAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([119, 105, 115, 104])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getU64Encoder().encode(expectSome(args.wishId)),
      ],
    });
  }
  if (!accounts.userState.value) {
    accounts.userState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([117, 115, 101, 114, 95, 115, 116, 97, 116, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.templeConfig.value) {
    accounts.templeConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 108, 101, 95, 118, 49])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.wishAccount),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateWishInstructionDataEncoder().encode(
      args as CreateWishInstructionDataArgs
    ),
  } as CreateWishInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountWishAccount,
    TAccountUserState,
    TAccountTempleConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateWishInput<
  TAccountUser extends string = string,
  TAccountWishAccount extends string = string,
  TAccountUserState extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  wishAccount: Address<TAccountWishAccount>;
  userState: Address<TAccountUserState>;
  templeConfig: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  wishId: CreateWishInstructionDataArgs['wishId'];
  contentHash: CreateWishInstructionDataArgs['contentHash'];
  isAnonymous: CreateWishInstructionDataArgs['isAnonymous'];
};

export function getCreateWishInstruction<
  TAccountUser extends string,
  TAccountWishAccount extends string,
  TAccountUserState extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateWishInput<
    TAccountUser,
    TAccountWishAccount,
    TAccountUserState,
    TAccountTempleConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateWishInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountWishAccount,
  TAccountUserState,
  TAccountTempleConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    wishAccount: { value: input.wishAccount ?? null, isWritable: true },
    userState: { value: input.userState ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.wishAccount),
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateWishInstructionDataEncoder().encode(
      args as CreateWishInstructionDataArgs
    ),
  } as CreateWishInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountWishAccount,
    TAccountUserState,
    TAccountTempleConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateWishInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    wishAccount: TAccountMetas[1];
    userState: TAccountMetas[2];
    templeConfig: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateWishInstructionData;
};

export function parseCreateWishInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateWishInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      wishAccount: getNextAccount(),
      userState: getNextAccount(),
      templeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateWishInstructionDataDecoder().decode(instruction.data),
  };
}
