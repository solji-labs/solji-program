/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_NFT_MINT_DISCRIMINATOR = new Uint8Array([
  220, 240, 28, 248, 182, 238, 138, 21,
]);

export function getCreateNftMintDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_NFT_MINT_DISCRIMINATOR
  );
}

export type CreateNftMintInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTempleAuthority extends string | AccountMeta<string> = string,
  TAccountNftMintAccount extends string | AccountMeta<string> = string,
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountMetaAccount extends string | AccountMeta<string> = string,
  TAccountMasterEditionAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTempleAuthority extends string
        ? WritableAccount<TAccountTempleAuthority>
        : TAccountTempleAuthority,
      TAccountNftMintAccount extends string
        ? WritableAccount<TAccountNftMintAccount>
        : TAccountNftMintAccount,
      TAccountTempleConfig extends string
        ? WritableAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountMetaAccount extends string
        ? WritableAccount<TAccountMetaAccount>
        : TAccountMetaAccount,
      TAccountMasterEditionAccount extends string
        ? WritableAccount<TAccountMasterEditionAccount>
        : TAccountMasterEditionAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateNftMintInstructionData = {
  discriminator: ReadonlyUint8Array;
  incenseId: number;
};

export type CreateNftMintInstructionDataArgs = { incenseId: number };

export function getCreateNftMintInstructionDataEncoder(): FixedSizeEncoder<CreateNftMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['incenseId', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_NFT_MINT_DISCRIMINATOR })
  );
}

export function getCreateNftMintInstructionDataDecoder(): FixedSizeDecoder<CreateNftMintInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['incenseId', getU8Decoder()],
  ]);
}

export function getCreateNftMintInstructionDataCodec(): FixedSizeCodec<
  CreateNftMintInstructionDataArgs,
  CreateNftMintInstructionData
> {
  return combineCodec(
    getCreateNftMintInstructionDataEncoder(),
    getCreateNftMintInstructionDataDecoder()
  );
}

export type CreateNftMintAsyncInput<
  TAccountAuthority extends string = string,
  TAccountTempleAuthority extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountMetaAccount extends string = string,
  TAccountMasterEditionAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  templeAuthority: Address<TAccountTempleAuthority>;
  /** nft mint */
  nftMintAccount: Address<TAccountNftMintAccount>;
  templeConfig?: Address<TAccountTempleConfig>;
  metaAccount?: Address<TAccountMetaAccount>;
  masterEditionAccount?: Address<TAccountMasterEditionAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  incenseId: CreateNftMintInstructionDataArgs['incenseId'];
};

export async function getCreateNftMintInstructionAsync<
  TAccountAuthority extends string,
  TAccountTempleAuthority extends string,
  TAccountNftMintAccount extends string,
  TAccountTempleConfig extends string,
  TAccountMetaAccount extends string,
  TAccountMasterEditionAccount extends string,
  TAccountTokenProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateNftMintAsyncInput<
    TAccountAuthority,
    TAccountTempleAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountMetaAccount,
    TAccountMasterEditionAccount,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountMetaAccount,
    TAccountMasterEditionAccount,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    templeAuthority: { value: input.templeAuthority ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    metaAccount: { value: input.metaAccount ?? null, isWritable: true },
    masterEditionAccount: {
      value: input.masterEditionAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.templeConfig.value) {
    accounts.templeConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 108, 101, 95, 118, 49])
        ),
      ],
    });
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.metaAccount.value) {
    accounts.metaAccount.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.nftMintAccount.value)
        ),
      ],
    });
  }
  if (!accounts.masterEditionAccount.value) {
    accounts.masterEditionAccount.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.nftMintAccount.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([101, 100, 105, 116, 105, 111, 110])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.templeAuthority),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.metaAccount),
      getAccountMeta(accounts.masterEditionAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateNftMintInstructionDataEncoder().encode(
      args as CreateNftMintInstructionDataArgs
    ),
  } as CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountMetaAccount,
    TAccountMasterEditionAccount,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type CreateNftMintInput<
  TAccountAuthority extends string = string,
  TAccountTempleAuthority extends string = string,
  TAccountNftMintAccount extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountMetaAccount extends string = string,
  TAccountMasterEditionAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  templeAuthority: Address<TAccountTempleAuthority>;
  /** nft mint */
  nftMintAccount: Address<TAccountNftMintAccount>;
  templeConfig: Address<TAccountTempleConfig>;
  metaAccount: Address<TAccountMetaAccount>;
  masterEditionAccount: Address<TAccountMasterEditionAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  incenseId: CreateNftMintInstructionDataArgs['incenseId'];
};

export function getCreateNftMintInstruction<
  TAccountAuthority extends string,
  TAccountTempleAuthority extends string,
  TAccountNftMintAccount extends string,
  TAccountTempleConfig extends string,
  TAccountMetaAccount extends string,
  TAccountMasterEditionAccount extends string,
  TAccountTokenProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateNftMintInput<
    TAccountAuthority,
    TAccountTempleAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountMetaAccount,
    TAccountMasterEditionAccount,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateNftMintInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTempleAuthority,
  TAccountNftMintAccount,
  TAccountTempleConfig,
  TAccountMetaAccount,
  TAccountMasterEditionAccount,
  TAccountTokenProgram,
  TAccountTokenMetadataProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    templeAuthority: { value: input.templeAuthority ?? null, isWritable: true },
    nftMintAccount: { value: input.nftMintAccount ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    metaAccount: { value: input.metaAccount ?? null, isWritable: true },
    masterEditionAccount: {
      value: input.masterEditionAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.templeAuthority),
      getAccountMeta(accounts.nftMintAccount),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.metaAccount),
      getAccountMeta(accounts.masterEditionAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateNftMintInstructionDataEncoder().encode(
      args as CreateNftMintInstructionDataArgs
    ),
  } as CreateNftMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTempleAuthority,
    TAccountNftMintAccount,
    TAccountTempleConfig,
    TAccountMetaAccount,
    TAccountMasterEditionAccount,
    TAccountTokenProgram,
    TAccountTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateNftMintInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    templeAuthority: TAccountMetas[1];
    /** nft mint */
    nftMintAccount: TAccountMetas[2];
    templeConfig: TAccountMetas[3];
    metaAccount: TAccountMetas[4];
    masterEditionAccount: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    tokenMetadataProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: CreateNftMintInstructionData;
};

export function parseCreateNftMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateNftMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      templeAuthority: getNextAccount(),
      nftMintAccount: getNextAccount(),
      templeConfig: getNextAccount(),
      metaAccount: getNextAccount(),
      masterEditionAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateNftMintInstructionDataDecoder().decode(instruction.data),
  };
}
