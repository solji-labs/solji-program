/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LIKE_WISH_DISCRIMINATOR = new Uint8Array([
  237, 115, 19, 77, 234, 31, 168, 83,
]);

export function getLikeWishDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LIKE_WISH_DISCRIMINATOR);
}

export type LikeWishInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountWishAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountWishAccount extends string
        ? WritableAccount<TAccountWishAccount>
        : TAccountWishAccount,
      ...TRemainingAccounts,
    ]
  >;

export type LikeWishInstructionData = {
  discriminator: ReadonlyUint8Array;
  wishId: bigint;
};

export type LikeWishInstructionDataArgs = { wishId: number | bigint };

export function getLikeWishInstructionDataEncoder(): FixedSizeEncoder<LikeWishInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['wishId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LIKE_WISH_DISCRIMINATOR })
  );
}

export function getLikeWishInstructionDataDecoder(): FixedSizeDecoder<LikeWishInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['wishId', getU64Decoder()],
  ]);
}

export function getLikeWishInstructionDataCodec(): FixedSizeCodec<
  LikeWishInstructionDataArgs,
  LikeWishInstructionData
> {
  return combineCodec(
    getLikeWishInstructionDataEncoder(),
    getLikeWishInstructionDataDecoder()
  );
}

export type LikeWishInput<
  TAccountUser extends string = string,
  TAccountWishAccount extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  wishAccount: Address<TAccountWishAccount>;
  wishId: LikeWishInstructionDataArgs['wishId'];
};

export function getLikeWishInstruction<
  TAccountUser extends string,
  TAccountWishAccount extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: LikeWishInput<TAccountUser, TAccountWishAccount>,
  config?: { programAddress?: TProgramAddress }
): LikeWishInstruction<TProgramAddress, TAccountUser, TAccountWishAccount> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    wishAccount: { value: input.wishAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.wishAccount),
    ],
    programAddress,
    data: getLikeWishInstructionDataEncoder().encode(
      args as LikeWishInstructionDataArgs
    ),
  } as LikeWishInstruction<TProgramAddress, TAccountUser, TAccountWishAccount>;

  return instruction;
}

export type ParsedLikeWishInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    wishAccount: TAccountMetas[1];
  };
  data: LikeWishInstructionData;
};

export function parseLikeWishInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedLikeWishInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      wishAccount: getNextAccount(),
    },
    data: getLikeWishInstructionDataDecoder().decode(instruction.data),
  };
}
