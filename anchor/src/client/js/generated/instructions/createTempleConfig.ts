/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getDonationLevelConfigDecoder,
  getDonationLevelConfigEncoder,
  getFortuneConfigDecoder,
  getFortuneConfigEncoder,
  getIncenseTypeDecoder,
  getIncenseTypeEncoder,
  type DonationLevelConfig,
  type DonationLevelConfigArgs,
  type FortuneConfig,
  type FortuneConfigArgs,
  type IncenseType,
  type IncenseTypeArgs,
} from '../types';

export const CREATE_TEMPLE_CONFIG_DISCRIMINATOR = new Uint8Array([
  227, 91, 153, 89, 83, 215, 178, 242,
]);

export function getCreateTempleConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TEMPLE_CONFIG_DISCRIMINATOR
  );
}

export type CreateTempleConfigInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountOwner extends
    | string
    | AccountMeta<string> = 'FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU',
  TAccountTempleConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTempleConfig extends string
        ? WritableAccount<TAccountTempleConfig>
        : TAccountTempleConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTempleConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  treasury: Address;
  incenseTypes: Array<IncenseType>;
  regularFortune: FortuneConfig;
  buddhaFortune: FortuneConfig;
  donationLevels: Array<DonationLevelConfig>;
};

export type CreateTempleConfigInstructionDataArgs = {
  treasury: Address;
  incenseTypes: Array<IncenseTypeArgs>;
  regularFortune: FortuneConfigArgs;
  buddhaFortune: FortuneConfigArgs;
  donationLevels: Array<DonationLevelConfigArgs>;
};

export function getCreateTempleConfigInstructionDataEncoder(): Encoder<CreateTempleConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['treasury', getAddressEncoder()],
      ['incenseTypes', getArrayEncoder(getIncenseTypeEncoder())],
      ['regularFortune', getFortuneConfigEncoder()],
      ['buddhaFortune', getFortuneConfigEncoder()],
      ['donationLevels', getArrayEncoder(getDonationLevelConfigEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_TEMPLE_CONFIG_DISCRIMINATOR })
  );
}

export function getCreateTempleConfigInstructionDataDecoder(): Decoder<CreateTempleConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['treasury', getAddressDecoder()],
    ['incenseTypes', getArrayDecoder(getIncenseTypeDecoder())],
    ['regularFortune', getFortuneConfigDecoder()],
    ['buddhaFortune', getFortuneConfigDecoder()],
    ['donationLevels', getArrayDecoder(getDonationLevelConfigDecoder())],
  ]);
}

export function getCreateTempleConfigInstructionDataCodec(): Codec<
  CreateTempleConfigInstructionDataArgs,
  CreateTempleConfigInstructionData
> {
  return combineCodec(
    getCreateTempleConfigInstructionDataEncoder(),
    getCreateTempleConfigInstructionDataDecoder()
  );
}

export type CreateTempleConfigAsyncInput<
  TAccountOwner extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner?: TransactionSigner<TAccountOwner>;
  templeConfig?: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  treasury: CreateTempleConfigInstructionDataArgs['treasury'];
  incenseTypes: CreateTempleConfigInstructionDataArgs['incenseTypes'];
  regularFortune: CreateTempleConfigInstructionDataArgs['regularFortune'];
  buddhaFortune: CreateTempleConfigInstructionDataArgs['buddhaFortune'];
  donationLevels: CreateTempleConfigInstructionDataArgs['donationLevels'];
};

export async function getCreateTempleConfigInstructionAsync<
  TAccountOwner extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateTempleConfigAsyncInput<
    TAccountOwner,
    TAccountTempleConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTempleConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTempleConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value =
      'FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU' as Address<'FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU'>;
  }
  if (!accounts.templeConfig.value) {
    accounts.templeConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 101, 109, 112, 108, 101, 95, 118, 49])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTempleConfigInstructionDataEncoder().encode(
      args as CreateTempleConfigInstructionDataArgs
    ),
  } as CreateTempleConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTempleConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateTempleConfigInput<
  TAccountOwner extends string = string,
  TAccountTempleConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner?: TransactionSigner<TAccountOwner>;
  templeConfig: Address<TAccountTempleConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  treasury: CreateTempleConfigInstructionDataArgs['treasury'];
  incenseTypes: CreateTempleConfigInstructionDataArgs['incenseTypes'];
  regularFortune: CreateTempleConfigInstructionDataArgs['regularFortune'];
  buddhaFortune: CreateTempleConfigInstructionDataArgs['buddhaFortune'];
  donationLevels: CreateTempleConfigInstructionDataArgs['donationLevels'];
};

export function getCreateTempleConfigInstruction<
  TAccountOwner extends string,
  TAccountTempleConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: CreateTempleConfigInput<
    TAccountOwner,
    TAccountTempleConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTempleConfigInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountTempleConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    templeConfig: { value: input.templeConfig ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.owner.value) {
    accounts.owner.value =
      'FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU' as Address<'FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.templeConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateTempleConfigInstructionDataEncoder().encode(
      args as CreateTempleConfigInstructionDataArgs
    ),
  } as CreateTempleConfigInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTempleConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateTempleConfigInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    templeConfig: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateTempleConfigInstructionData;
};

export function parseCreateTempleConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTempleConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      templeConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTempleConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
