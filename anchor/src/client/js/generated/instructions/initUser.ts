/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_USER_DISCRIMINATOR = new Uint8Array([
  14, 51, 68, 159, 237, 78, 158, 102,
]);

export function getInitUserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_USER_DISCRIMINATOR);
}

export type InitUserInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountUserState extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserState extends string
        ? WritableAccount<TAccountUserState>
        : TAccountUserState,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitUserInstructionData = { discriminator: ReadonlyUint8Array };

export type InitUserInstructionDataArgs = {};

export function getInitUserInstructionDataEncoder(): FixedSizeEncoder<InitUserInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_USER_DISCRIMINATOR })
  );
}

export function getInitUserInstructionDataDecoder(): FixedSizeDecoder<InitUserInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitUserInstructionDataCodec(): FixedSizeCodec<
  InitUserInstructionDataArgs,
  InitUserInstructionData
> {
  return combineCodec(
    getInitUserInstructionDataEncoder(),
    getInitUserInstructionDataDecoder()
  );
}

export type InitUserAsyncInput<
  TAccountUserState extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  userState?: Address<TAccountUserState>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitUserInstructionAsync<
  TAccountUserState extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: InitUserAsyncInput<
    TAccountUserState,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitUserInstruction<
    TProgramAddress,
    TAccountUserState,
    TAccountUser,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userState: { value: input.userState ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.userState.value) {
    accounts.userState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([117, 115, 101, 114, 95, 115, 116, 97, 116, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitUserInstructionDataEncoder().encode({}),
  } as InitUserInstruction<
    TProgramAddress,
    TAccountUserState,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitUserInput<
  TAccountUserState extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  userState: Address<TAccountUserState>;
  user: TransactionSigner<TAccountUser>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitUserInstruction<
  TAccountUserState extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TEMPLE_PROGRAM_ADDRESS,
>(
  input: InitUserInput<TAccountUserState, TAccountUser, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): InitUserInstruction<
  TProgramAddress,
  TAccountUserState,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TEMPLE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userState: { value: input.userState ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userState),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitUserInstructionDataEncoder().encode({}),
  } as InitUserInstruction<
    TProgramAddress,
    TAccountUserState,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitUserInstruction<
  TProgram extends string = typeof TEMPLE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    userState: TAccountMetas[0];
    user: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitUserInstructionData;
};

export function parseInitUserInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitUserInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userState: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitUserInstructionDataDecoder().decode(instruction.data),
  };
}
