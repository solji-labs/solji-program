/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const BUDDHA_N_F_T_DISCRIMINATOR = new Uint8Array([
  42, 248, 94, 111, 99, 57, 196, 133,
]);

export function getBuddhaNFTDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BUDDHA_N_F_T_DISCRIMINATOR
  );
}

export type BuddhaNFT = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  mint: Address;
  serialNumber: number;
  mintedAt: bigint;
  isActive: boolean;
};

export type BuddhaNFTArgs = {
  owner: Address;
  mint: Address;
  serialNumber: number;
  mintedAt: number | bigint;
  isActive: boolean;
};

export function getBuddhaNFTEncoder(): FixedSizeEncoder<BuddhaNFTArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['serialNumber', getU32Encoder()],
      ['mintedAt', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: BUDDHA_N_F_T_DISCRIMINATOR })
  );
}

export function getBuddhaNFTDecoder(): FixedSizeDecoder<BuddhaNFT> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['serialNumber', getU32Decoder()],
    ['mintedAt', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
  ]);
}

export function getBuddhaNFTCodec(): FixedSizeCodec<BuddhaNFTArgs, BuddhaNFT> {
  return combineCodec(getBuddhaNFTEncoder(), getBuddhaNFTDecoder());
}

export function decodeBuddhaNFT<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BuddhaNFT, TAddress>;
export function decodeBuddhaNFT<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BuddhaNFT, TAddress>;
export function decodeBuddhaNFT<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<BuddhaNFT, TAddress> | MaybeAccount<BuddhaNFT, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBuddhaNFTDecoder()
  );
}

export async function fetchBuddhaNFT<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BuddhaNFT, TAddress>> {
  const maybeAccount = await fetchMaybeBuddhaNFT(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBuddhaNFT<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BuddhaNFT, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBuddhaNFT(maybeAccount);
}

export async function fetchAllBuddhaNFT(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BuddhaNFT>[]> {
  const maybeAccounts = await fetchAllMaybeBuddhaNFT(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBuddhaNFT(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BuddhaNFT>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBuddhaNFT(maybeAccount));
}

export function getBuddhaNFTSize(): number {
  return 85;
}
