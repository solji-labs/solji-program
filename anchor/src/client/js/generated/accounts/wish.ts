/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const WISH_DISCRIMINATOR = new Uint8Array([
  19, 93, 74, 238, 190, 158, 94, 132,
]);

export function getWishDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WISH_DISCRIMINATOR);
}

export type Wish = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  creator: Address;
  contentHash: ReadonlyUint8Array;
  isAnonymous: boolean;
  createdAt: bigint;
  likes: bigint;
  bump: number;
};

export type WishArgs = {
  id: number | bigint;
  creator: Address;
  contentHash: ReadonlyUint8Array;
  isAnonymous: boolean;
  createdAt: number | bigint;
  likes: number | bigint;
  bump: number;
};

export function getWishEncoder(): FixedSizeEncoder<WishArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
      ['creator', getAddressEncoder()],
      ['contentHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['isAnonymous', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['likes', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WISH_DISCRIMINATOR })
  );
}

export function getWishDecoder(): FixedSizeDecoder<Wish> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
    ['creator', getAddressDecoder()],
    ['contentHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['isAnonymous', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['likes', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getWishCodec(): FixedSizeCodec<WishArgs, Wish> {
  return combineCodec(getWishEncoder(), getWishDecoder());
}

export function decodeWish<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Wish, TAddress>;
export function decodeWish<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Wish, TAddress>;
export function decodeWish<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Wish, TAddress> | MaybeAccount<Wish, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWishDecoder()
  );
}

export async function fetchWish<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Wish, TAddress>> {
  const maybeAccount = await fetchMaybeWish(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWish<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Wish, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWish(maybeAccount);
}

export async function fetchAllWish(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Wish>[]> {
  const maybeAccounts = await fetchAllMaybeWish(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWish(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Wish>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWish(maybeAccount));
}

export function getWishSize(): number {
  return 98;
}
