/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getDailyIncenseCountDecoder,
  getDailyIncenseCountEncoder,
  getIncenseBalanceDecoder,
  getIncenseBalanceEncoder,
  type DailyIncenseCount,
  type DailyIncenseCountArgs,
  type IncenseBalance,
  type IncenseBalanceArgs,
} from '../types';

export const USER_STATE_DISCRIMINATOR = new Uint8Array([
  72, 177, 85, 249, 76, 167, 186, 126,
]);

export function getUserStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(USER_STATE_DISCRIMINATOR);
}

export type UserState = {
  discriminator: ReadonlyUint8Array;
  user: Address;
  incensePoints: bigint;
  merit: bigint;
  incenseNumber: number;
  updateTime: bigint;
  incenseBalance: Array<IncenseBalance>;
  dailyIncenseCount: Array<DailyIncenseCount>;
  dailyDrawCount: number;
  lastDrawTime: bigint;
  dailyWishCount: number;
  lastWishTime: bigint;
  bump: number;
  hasBuddhaNft: boolean;
  randomnessAccount: Option<Address>;
  donationAmount: bigint;
  donationLevel: number;
  totalDonationCount: number;
  lastDonationTime: bigint;
};

export type UserStateArgs = {
  user: Address;
  incensePoints: number | bigint;
  merit: number | bigint;
  incenseNumber: number;
  updateTime: number | bigint;
  incenseBalance: Array<IncenseBalanceArgs>;
  dailyIncenseCount: Array<DailyIncenseCountArgs>;
  dailyDrawCount: number;
  lastDrawTime: number | bigint;
  dailyWishCount: number;
  lastWishTime: number | bigint;
  bump: number;
  hasBuddhaNft: boolean;
  randomnessAccount: OptionOrNullable<Address>;
  donationAmount: number | bigint;
  donationLevel: number;
  totalDonationCount: number;
  lastDonationTime: number | bigint;
};

export function getUserStateEncoder(): Encoder<UserStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['incensePoints', getU64Encoder()],
      ['merit', getU64Encoder()],
      ['incenseNumber', getU8Encoder()],
      ['updateTime', getI64Encoder()],
      ['incenseBalance', getArrayEncoder(getIncenseBalanceEncoder())],
      ['dailyIncenseCount', getArrayEncoder(getDailyIncenseCountEncoder())],
      ['dailyDrawCount', getU8Encoder()],
      ['lastDrawTime', getI64Encoder()],
      ['dailyWishCount', getU8Encoder()],
      ['lastWishTime', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['hasBuddhaNft', getBooleanEncoder()],
      ['randomnessAccount', getOptionEncoder(getAddressEncoder())],
      ['donationAmount', getU64Encoder()],
      ['donationLevel', getU8Encoder()],
      ['totalDonationCount', getU32Encoder()],
      ['lastDonationTime', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_STATE_DISCRIMINATOR })
  );
}

export function getUserStateDecoder(): Decoder<UserState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['incensePoints', getU64Decoder()],
    ['merit', getU64Decoder()],
    ['incenseNumber', getU8Decoder()],
    ['updateTime', getI64Decoder()],
    ['incenseBalance', getArrayDecoder(getIncenseBalanceDecoder())],
    ['dailyIncenseCount', getArrayDecoder(getDailyIncenseCountDecoder())],
    ['dailyDrawCount', getU8Decoder()],
    ['lastDrawTime', getI64Decoder()],
    ['dailyWishCount', getU8Decoder()],
    ['lastWishTime', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['hasBuddhaNft', getBooleanDecoder()],
    ['randomnessAccount', getOptionDecoder(getAddressDecoder())],
    ['donationAmount', getU64Decoder()],
    ['donationLevel', getU8Decoder()],
    ['totalDonationCount', getU32Decoder()],
    ['lastDonationTime', getI64Decoder()],
  ]);
}

export function getUserStateCodec(): Codec<UserStateArgs, UserState> {
  return combineCodec(getUserStateEncoder(), getUserStateDecoder());
}

export function decodeUserState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserState, TAddress>;
export function decodeUserState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserState, TAddress>;
export function decodeUserState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserState, TAddress> | MaybeAccount<UserState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserStateDecoder()
  );
}

export async function fetchUserState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserState, TAddress>> {
  const maybeAccount = await fetchMaybeUserState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserState(maybeAccount);
}

export async function fetchAllUserState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserState>[]> {
  const maybeAccounts = await fetchAllMaybeUserState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserState(maybeAccount));
}
