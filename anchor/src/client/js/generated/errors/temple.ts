/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TEMPLE_PROGRAM_ADDRESS } from '../programs';

/** InvalidOwner: Input account owner is not the program address */
export const TEMPLE_ERROR__INVALID_OWNER = 0x1770; // 6000
/** MathOverflow: Math overflow */
export const TEMPLE_ERROR__MATH_OVERFLOW = 0x1771; // 6001
/** InvalidIncenseId: Invalid incense ID */
export const TEMPLE_ERROR__INVALID_INCENSE_ID = 0x1772; // 6002
/** InsufficientSolBalance: Insufficient SOL balance to pay for incense */
export const TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE = 0x1773; // 6003
/** InvalidTempleTreasury: Temple treasury account mismatch */
export const TEMPLE_ERROR__INVALID_TEMPLE_TREASURY = 0x1774; // 6004
/** DailyIncenseLimitExceeded: Daily incense limit exceeded */
export const TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED = 0x1775; // 6005
/** InvalidAmount: Invalid Amount */
export const TEMPLE_ERROR__INVALID_AMOUNT = 0x1776; // 6006
/** ExceedDailyIncenseLimit: Exceed daily incense limit */
export const TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT = 0x1777; // 6007
/** InsufficientIncenseBalance: Insufficient incense balance */
export const TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE = 0x1778; // 6008
/** DonationOnlyIncense: This incense type is only available through donations */
export const TEMPLE_ERROR__DONATION_ONLY_INCENSE = 0x1779; // 6009
/** SpecialEffectFailed: Failed to trigger special effect */
export const TEMPLE_ERROR__SPECIAL_EFFECT_FAILED = 0x177a; // 6010
/** InsufficientMerit: Insufficient merit points */
export const TEMPLE_ERROR__INSUFFICIENT_MERIT = 0x177b; // 6011
/** DailyWishLimitExceeded: Daily wish limit exceeded */
export const TEMPLE_ERROR__DAILY_WISH_LIMIT_EXCEEDED = 0x177c; // 6012
/** WishAlreadyExists: Wish already exists */
export const TEMPLE_ERROR__WISH_ALREADY_EXISTS = 0x177d; // 6013
/** InvalidWishAccount: Invalid wish account */
export const TEMPLE_ERROR__INVALID_WISH_ACCOUNT = 0x177e; // 6014
/** InvalidUserState: Invalid user state */
export const TEMPLE_ERROR__INVALID_USER_STATE = 0x177f; // 6015
/** CannotLikeOwnWish: Cannot like own wish */
export const TEMPLE_ERROR__CANNOT_LIKE_OWN_WISH = 0x1780; // 6016
/** UserHasBuddhaNFT: User has Buddha NFT */
export const TEMPLE_ERROR__USER_HAS_BUDDHA_N_F_T = 0x1781; // 6017
/** BuddhaNFTSupplyExceeded: Buddha NFT supply exceeded */
export const TEMPLE_ERROR__BUDDHA_N_F_T_SUPPLY_EXCEEDED = 0x1782; // 6018
/** InsufficientDonation: Insufficient donation */
export const TEMPLE_ERROR__INSUFFICIENT_DONATION = 0x1783; // 6019
/** RandomnessNotReady: Randomness not ready */
export const TEMPLE_ERROR__RANDOMNESS_NOT_READY = 0x1784; // 6020
/** RandomnessNotResolved: Randomness not resolved */
export const TEMPLE_ERROR__RANDOMNESS_NOT_RESOLVED = 0x1785; // 6021
/** RandomnessAlreadyUsed: Randomness already used */
export const TEMPLE_ERROR__RANDOMNESS_ALREADY_USED = 0x1786; // 6022
/** RandomnessExpired: Randomness expired */
export const TEMPLE_ERROR__RANDOMNESS_EXPIRED = 0x1787; // 6023
/** InvalidRandomness: Invalid randomness */
export const TEMPLE_ERROR__INVALID_RANDOMNESS = 0x1788; // 6024
/** Unauthorized: Unauthorized access */
export const TEMPLE_ERROR__UNAUTHORIZED = 0x1789; // 6025
/** InvalidIncenseType: Invalid incense type */
export const TEMPLE_ERROR__INVALID_INCENSE_TYPE = 0x178a; // 6026
/** InvalidFortuneConfig: Invalid fortune config */
export const TEMPLE_ERROR__INVALID_FORTUNE_CONFIG = 0x178b; // 6027
/** InvalidDonationLevel: Invalid donation level */
export const TEMPLE_ERROR__INVALID_DONATION_LEVEL = 0x178c; // 6028

export type TempleError =
  | typeof TEMPLE_ERROR__BUDDHA_N_F_T_SUPPLY_EXCEEDED
  | typeof TEMPLE_ERROR__CANNOT_LIKE_OWN_WISH
  | typeof TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED
  | typeof TEMPLE_ERROR__DAILY_WISH_LIMIT_EXCEEDED
  | typeof TEMPLE_ERROR__DONATION_ONLY_INCENSE
  | typeof TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT
  | typeof TEMPLE_ERROR__INSUFFICIENT_DONATION
  | typeof TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE
  | typeof TEMPLE_ERROR__INSUFFICIENT_MERIT
  | typeof TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE
  | typeof TEMPLE_ERROR__INVALID_AMOUNT
  | typeof TEMPLE_ERROR__INVALID_DONATION_LEVEL
  | typeof TEMPLE_ERROR__INVALID_FORTUNE_CONFIG
  | typeof TEMPLE_ERROR__INVALID_INCENSE_ID
  | typeof TEMPLE_ERROR__INVALID_INCENSE_TYPE
  | typeof TEMPLE_ERROR__INVALID_OWNER
  | typeof TEMPLE_ERROR__INVALID_RANDOMNESS
  | typeof TEMPLE_ERROR__INVALID_TEMPLE_TREASURY
  | typeof TEMPLE_ERROR__INVALID_USER_STATE
  | typeof TEMPLE_ERROR__INVALID_WISH_ACCOUNT
  | typeof TEMPLE_ERROR__MATH_OVERFLOW
  | typeof TEMPLE_ERROR__RANDOMNESS_ALREADY_USED
  | typeof TEMPLE_ERROR__RANDOMNESS_EXPIRED
  | typeof TEMPLE_ERROR__RANDOMNESS_NOT_READY
  | typeof TEMPLE_ERROR__RANDOMNESS_NOT_RESOLVED
  | typeof TEMPLE_ERROR__SPECIAL_EFFECT_FAILED
  | typeof TEMPLE_ERROR__UNAUTHORIZED
  | typeof TEMPLE_ERROR__USER_HAS_BUDDHA_N_F_T
  | typeof TEMPLE_ERROR__WISH_ALREADY_EXISTS;

let templeErrorMessages: Record<TempleError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  templeErrorMessages = {
    [TEMPLE_ERROR__BUDDHA_N_F_T_SUPPLY_EXCEEDED]: `Buddha NFT supply exceeded`,
    [TEMPLE_ERROR__CANNOT_LIKE_OWN_WISH]: `Cannot like own wish`,
    [TEMPLE_ERROR__DAILY_INCENSE_LIMIT_EXCEEDED]: `Daily incense limit exceeded`,
    [TEMPLE_ERROR__DAILY_WISH_LIMIT_EXCEEDED]: `Daily wish limit exceeded`,
    [TEMPLE_ERROR__DONATION_ONLY_INCENSE]: `This incense type is only available through donations`,
    [TEMPLE_ERROR__EXCEED_DAILY_INCENSE_LIMIT]: `Exceed daily incense limit`,
    [TEMPLE_ERROR__INSUFFICIENT_DONATION]: `Insufficient donation`,
    [TEMPLE_ERROR__INSUFFICIENT_INCENSE_BALANCE]: `Insufficient incense balance`,
    [TEMPLE_ERROR__INSUFFICIENT_MERIT]: `Insufficient merit points`,
    [TEMPLE_ERROR__INSUFFICIENT_SOL_BALANCE]: `Insufficient SOL balance to pay for incense`,
    [TEMPLE_ERROR__INVALID_AMOUNT]: `Invalid Amount`,
    [TEMPLE_ERROR__INVALID_DONATION_LEVEL]: `Invalid donation level`,
    [TEMPLE_ERROR__INVALID_FORTUNE_CONFIG]: `Invalid fortune config`,
    [TEMPLE_ERROR__INVALID_INCENSE_ID]: `Invalid incense ID`,
    [TEMPLE_ERROR__INVALID_INCENSE_TYPE]: `Invalid incense type`,
    [TEMPLE_ERROR__INVALID_OWNER]: `Input account owner is not the program address`,
    [TEMPLE_ERROR__INVALID_RANDOMNESS]: `Invalid randomness`,
    [TEMPLE_ERROR__INVALID_TEMPLE_TREASURY]: `Temple treasury account mismatch`,
    [TEMPLE_ERROR__INVALID_USER_STATE]: `Invalid user state`,
    [TEMPLE_ERROR__INVALID_WISH_ACCOUNT]: `Invalid wish account`,
    [TEMPLE_ERROR__MATH_OVERFLOW]: `Math overflow`,
    [TEMPLE_ERROR__RANDOMNESS_ALREADY_USED]: `Randomness already used`,
    [TEMPLE_ERROR__RANDOMNESS_EXPIRED]: `Randomness expired`,
    [TEMPLE_ERROR__RANDOMNESS_NOT_READY]: `Randomness not ready`,
    [TEMPLE_ERROR__RANDOMNESS_NOT_RESOLVED]: `Randomness not resolved`,
    [TEMPLE_ERROR__SPECIAL_EFFECT_FAILED]: `Failed to trigger special effect`,
    [TEMPLE_ERROR__UNAUTHORIZED]: `Unauthorized access`,
    [TEMPLE_ERROR__USER_HAS_BUDDHA_N_F_T]: `User has Buddha NFT`,
    [TEMPLE_ERROR__WISH_ALREADY_EXISTS]: `Wish already exists`,
  };
}

export function getTempleErrorMessage(code: TempleError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (templeErrorMessages as Record<TempleError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTempleError<TProgramErrorCode extends TempleError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TEMPLE_PROGRAM_ADDRESS,
    code
  );
}
